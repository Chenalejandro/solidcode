diff --git a/dist/utils/caches.js b/dist/utils/caches.js
index 7a3aa54f2adfc4058a2b071a183bdf440e5511af..5581248b34bf786bc40855a59bedde5461932d33 100644
--- a/dist/utils/caches.js
+++ b/dist/utils/caches.js
@@ -1,6 +1,6 @@
 import { DependenciesMap } from "./maps";
 import { filterUndefined } from "./objects";
-import { pending, rateLimited, resolved, runAsynchronously, wait } from "./promises";
+import { pending, rateLimited, resolved, runAsynchronously } from "./promises";
 import { AsyncStore } from "./stores";
 /**
  * Can be used to cache the result of a function call, for example for the `use` hook in React.
@@ -96,7 +96,6 @@ class AsyncValueCache {
         this._options = _options;
         this._subscriptionsCount = 0;
         this._unsubscribers = [];
-        this._mostRecentRefreshPromiseIndex = 0;
         this._store = new AsyncStore();
         this._rateLimitOptions = {
             concurrency: 1,
@@ -145,32 +144,23 @@ class AsyncValueCache {
     forceSetCachedValueAsync(value) {
         return this._setAsync(value);
     }
-    /**
-     * Refetches the value from the fetcher, and updates the cache with it.
-     */
     async refresh() {
         return await this.getOrWait("write-only");
     }
-    /**
-     * Invalidates the cache, marking it to refresh on the next read. If anyone was listening to it, it will refresh
-     * immediately.
-     */
-    invalidate() {
+    async invalidate() {
         this._store.setUnavailable();
         this._pendingPromise = undefined;
-        if (this._subscriptionsCount > 0) {
-            runAsynchronously(this.refresh());
-        }
+        return await this.refresh();
     }
     onStateChange(callback) {
         const storeObj = this._store.onChange(callback);
-        runAsynchronously(this.getOrWait("read-write"));
         if (this._subscriptionsCount++ === 0 && this._options.onSubscribe) {
             const unsubscribe = this._options.onSubscribe(() => {
                 runAsynchronously(this.refresh());
             });
             this._unsubscribers.push(unsubscribe);
         }
+        runAsynchronously(this.refresh());
         let hasUnsubscribed = false;
         return {
             unsubscribe: () => {
@@ -179,15 +169,6 @@ class AsyncValueCache {
                 hasUnsubscribed = true;
                 storeObj.unsubscribe();
                 if (--this._subscriptionsCount === 0) {
-                    const currentRefreshPromiseIndex = ++this._mostRecentRefreshPromiseIndex;
-                    runAsynchronously(async () => {
-                        // wait a few seconds; if anything changes during that time, we don't want to refresh
-                        // else we do unnecessary requests if we unsubscribe and then subscribe again immediately
-                        await wait(5000);
-                        if (this._subscriptionsCount === 0 && currentRefreshPromiseIndex === this._mostRecentRefreshPromiseIndex) {
-                            this.invalidate();
-                        }
-                    });
                     for (const unsubscribe of this._unsubscribers) {
                         unsubscribe();
                     }
